#!/usr/bin/env -S expect -f
set timeout -1
proc slurp {file} {
    set fh [open $file r]
    set ret [read $fh]
    close $fh
    return $ret
}
set imageName [lindex $argv 0]

if {[string trimleft $imageName] eq ""} {
  puts "No Image file provided as 1st argument\n"
  exit
}

set newHostName [lindex $argv 1]

if {[string trimleft $newHostName] eq ""} {
  puts "No hostname provided as 2nd argument\n"
  puts "Optionally: get password from 3rd argument\n"
  exit
}

set optionalNewPass [lindex $argv 2]

set include_file "localaddons"

set cwd [file normalize [file dirname $argv0]]
set imagePath [file join $cwd $imageName]
puts $imageName
puts $imagePath\n
if {[file exists $include_file] } {
  puts "$include_file exists and will be used\n"
}

if {[ string match "*arm64*" $imageName ]} {
puts "64bit image detected"
  spawn docker run -it --rm -v $imagePath:/sdcard/filesystem.img ghcr.io/carlosperate/dockerpi:vm-fix pi3
} else {
  spawn docker run -it --rm -v $imagePath:/sdcard/filesystem.img lukechilds/dockerpi:vm
}
expect "raspberrypi login: "
send "pi\n"
expect "Password: "
send "raspberry\n"
expect "$ "

send "sudo raspi-config nonint do_hostname $newHostName\n"
expect "$ "

if {[string trimleft $optionalNewPass] ne ""} {
send "sudo passwd pi\n"
expect "New password: "
send "$optionalNewPass\n"
expect "Retype new password: "
send "$optionalNewPass\n"
expect "$ "
}

send "sudo apt-get update\n"
expect "$ "
send "sudo apt-get -y install dnsmasq\n"
expect "$ "
send "sudo apt-get clean\n"
expect "$ "
send "sudo su -\n"

set file [slurp "etc/dnsmasq.d/usb0"]
expect "# "
send "cat <<EOF >> /etc/dnsmasq.d/usb0\n"
send "$file\n"
send "EOF\n"

set file [slurp "etc/network/interfaces.d/usb0"]
expect "# "
send "cat <<EOF >> /etc/network/interfaces.d/usb0\n"
send "$file\n"
send "EOF\n"

set file [slurp "usr/local/sbin/usb-gadget.sh"]
expect "# "
send "cat <<EOF >> /usr/local/sbin/usb-gadget.sh\n"
send "$file\n"
send "EOF\n"
expect "# "
send "chmod +x /usr/local/sbin/usb-gadget.sh\n"

set file [slurp "lib/systemd/system/usbgadget.service"]
expect "# "
send "cat <<EOF >> /lib/systemd/system/usbgadget.service\n"
send "$file\n"
send "EOF\n"
expect "# "
send "systemctl enable usbgadget.service\n"

expect "# "
send "echo dtoverlay=dwc2 >> /boot/config.txt\n"

expect "# "
send "sed -i 's/$/ modules-load=dwc2/' /boot/cmdline.txt \n"

expect "# "
send "touch /boot/ssh\n"

expect "# "
send "echo libcomposite >> /etc/modules\n"

expect "# "
send "echo denyinterfaces usb0 >> /etc/dhcpcd.conf\n"

expect "# "
send "sudo systemctl enable getty@ttyGS0.service\n"

expect "# "

if {[file exists $include_file]} {
  catch {source $include_file} result options
  if {[dict get $options -code] != 0} {
      puts stderr "could not source $include_file: $result"
      exit 1
  }
}
send "poweroff\n"

expect "Reboot failed -- System halted"
exec docker stop dockerpi
exit
